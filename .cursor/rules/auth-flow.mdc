Auth Flow (Email/Password + JWT)

- Register endpoint: POST /api/v1/auth/register
  - Request: `{ email, password }` (email as username, password min 8 chars).
  - Server validates email format, checks email/username uniqueness, hashes password with bcrypt, creates user with `Unverified` status and `User` role.
  - Response: `{ message: "registered" }`.

- Login endpoint: POST /api/v1/auth/login
  - Request: `{ email, password }`.
  - Server validates credentials, updates last login timestamp, generates access token and refresh token, stores refresh token hash in database, sets refresh token as httpOnly cookie.
  - Response: `AuthResponse` with `access_token`, `username`, `roles`, `expires_in`, `token_type=Bearer` (refresh token in cookie).

- Me endpoint: GET /api/v1/auth/me
  - Requires `Authorization: Bearer <access_token>`.
  - Extracts user info from JWT claims: `user_id`, `username`, `email`, `phone_number`, `role`, `email_verified`, `phone_verified`, `last_login_at`.
  - Response: `MeResponse` with user profile data.

- Refresh endpoint: POST /api/v1/auth/refresh
  - Uses refresh token from httpOnly cookie.
  - Validates refresh JWT, checks session in database, finds user, generates new access token, creates new refresh token, revokes old session, sets new refresh token cookie.
  - Response: `AuthResponse` with new tokens.

- Logout endpoint: POST /api/v1/auth/logout
  - Uses refresh token from httpOnly cookie.
  - Validates token, revokes session from database, expires refresh token cookie.
  - Response: `{ message: "Logged out successfully" }`.

- JWT Claims Structure:
  - `user_id` (UUID), `username`, `email`, `phone_number`, `role`, `email_verified`, `phone_verified`, `last_login_at`.
  - Access tokens: standard claims without `refresh_token_base64`.
  - Refresh tokens: include `refresh_token_base64` for session tracking.

- Session Management:
  - Refresh tokens stored as SHA256 hash in database with expiration.
  - Token rotation on refresh for security.
  - Session revocation on logout.

- Config (jwt):
  - `issuer`, `secret_key`, `access_expiration`, `refresh_expiration`.

- Security Notes:
  - Password hashing with bcrypt.
  - Refresh tokens as httpOnly cookies.
  - Token rotation on refresh.
  - Session-based refresh token validation.
  - Email validation and uniqueness checks.
