name: DEV - Deploy

on:
  push:
    branches: [ "master" ]
    paths:
      - 'app/**/*'
      - 'config/**/*'
      - 'k8s/dev/*'
      - 'sql/**/*'
      - Dockerfile
      - Dockerfile.migration
  workflow_dispatch:

env:
  ENVIRONMENT: dev
  GITHUB_SHA: ${{ github.sha }}
  GO_VERSION: '1.24'
  # Secrets
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
  # Variables
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID_DEV }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  BASE_DOMAIN: ${{ vars.BASE_DOMAIN_DEV }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO_DEV }}
  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME_DEV }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  SLACK_NOTIFICATION_CHANNEL: ${{ vars.SLACK_NOTIFICATION_CHANNEL }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: "read"
      id-token: write

    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v2
        id: github-app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
          token: ${{ steps.github-app-token.outputs.token }}
          ref: ${{ github.head_ref }}
          # Make sure the value of GITHUB_TOKEN will not be persisted in repo's config
          persist-credentials: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: gh-actions
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', 'Dockerfile.migration') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Prepare docker image tags
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          CURRENT_DATE=$(date +%Y%m%d)
          IMAGE_TAG="${{ env.ENVIRONMENT }}-$CURRENT_DATE-$SHORT_SHA"
          echo "API_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV
          echo "API_BUILTTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and Push the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          build-args: |
            API_VERSION=${{ env.API_VERSION }}
            API_BUILTTIME=${{ env.API_BUILTTIME }}
            GO_VERSION=${{ env.GO_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true

      - name: Build and Push the flyway Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.migration
          tags: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}-migration
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Extract app version from manifest.json
        run: |
          APP_VERSION=$(cat manifest.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[ ",]//g'
          )
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Prepare docker image tags
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          CURRENT_DATE=$(date +%Y%m%d)
          IMAGE_TAG="${{ env.ENVIRONMENT }}-$CURRENT_DATE-$SHORT_SHA-$SERVICE_NAME"

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build the Docker images
        run: |
          docker build -t "$DOCKER_REPO":"$IMAGE_TAG" --build-arg APP_VERSION=$APP_VERSION .
          docker build -t "$DOCKER_REPO":"$IMAGE_TAG-migration" -f Dockerfile.migration .

      - name: Push the Docker images
        run: |
          docker push "$DOCKER_REPO":"$IMAGE_TAG"
          docker push "$DOCKER_REPO":"$IMAGE_TAG-migration"

      - name: Tag and push latest alias
        run: |
          docker tag "$DOCKER_REPO:${IMAGE_TAG}" "$DOCKER_REPO:${SERVICE_NAME}-latest"
          docker push "$DOCKER_REPO:${SERVICE_NAME}-latest"

          # Tag migration image with -migration suffix as well
          docker tag "$DOCKER_REPO:${IMAGE_TAG}-migration" "$DOCKER_REPO:${SERVICE_NAME}-migration-latest"
          docker push "$DOCKER_REPO:${SERVICE_NAME}-migration-latest"

      - name: Trigger ECS deployment
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --force-new-deployment

      - name: "Extract Git info"
        run: |
          echo "GITHUB_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>' | xargs)" >> $GITHUB_ENV
          echo "GITHUB_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GITHUB_REPO=$(git config --get remote.origin.url)" >> $GITHUB_ENV

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          GITHUB_COMMITS=$(git --no-pager log --pretty=format:'%h (%an) %s' -n3 --no-color |  while read line || [ -n "$line" ]; do echo -n "- $line \\n"; done)
          echo "GITHUB_COMMITS<<$EOF" >> "$GITHUB_ENV"
          echo $GITHUB_COMMITS | sed "s/\"/'/g" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"

      - name: Slack Notification
        uses: slackapi/slack-github-action@v2
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *${{ env.SERVICE_NAME }} - Deployed to ${{ env.ENVIRONMENT }}*"
                  }
                },{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Created by:* ${{ env.GITHUB_AUTHOR }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```${{ env.GITHUB_COMMITS }}```"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View changes"
                      },
                      "style": "primary",
                      "url": "${{ env.GITHUB_REPO }}/commit/${{ env.GITHUB_REVISION}}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Run"
                      },
                      "style": "primary",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "API Docs"
                      },
                      "style": "primary",
                      "url": "https://${{ env.SERVICE_NAME }}.${{ env.BASE_DOMAIN }}/docs/index.html"
                    }
                  ]
                }
              ]
            }
