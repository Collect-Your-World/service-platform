// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"backend/service-platform/app/database/constant/job"
	"backend/service-platform/app/database/entity"
	"backend/service-platform/app/manager"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJobManager creates a new instance of MockJobManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobManager {
	mock := &MockJobManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobManager is an autogenerated mock type for the JobManager type
type MockJobManager struct {
	mock.Mock
}

type MockJobManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobManager) EXPECT() *MockJobManager_Expecter {
	return &MockJobManager_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function for the type MockJobManager
func (_mock *MockJobManager) CreateJob(ctx context.Context, req manager.CreateJobRequest) (*entity.Job, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *entity.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, manager.CreateJobRequest) (*entity.Job, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, manager.CreateJobRequest) *entity.Job); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, manager.CreateJobRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobManager_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockJobManager_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req manager.CreateJobRequest
func (_e *MockJobManager_Expecter) CreateJob(ctx interface{}, req interface{}) *MockJobManager_CreateJob_Call {
	return &MockJobManager_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, req)}
}

func (_c *MockJobManager_CreateJob_Call) Run(run func(ctx context.Context, req manager.CreateJobRequest)) *MockJobManager_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 manager.CreateJobRequest
		if args[1] != nil {
			arg1 = args[1].(manager.CreateJobRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobManager_CreateJob_Call) Return(job *entity.Job, err error) *MockJobManager_CreateJob_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobManager_CreateJob_Call) RunAndReturn(run func(ctx context.Context, req manager.CreateJobRequest) (*entity.Job, error)) *MockJobManager_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function for the type MockJobManager
func (_mock *MockJobManager) GetJob(ctx context.Context, id string) (*entity.Job, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *entity.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.Job, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.Job); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobManager_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockJobManager_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockJobManager_Expecter) GetJob(ctx interface{}, id interface{}) *MockJobManager_GetJob_Call {
	return &MockJobManager_GetJob_Call{Call: _e.mock.On("GetJob", ctx, id)}
}

func (_c *MockJobManager_GetJob_Call) Run(run func(ctx context.Context, id string)) *MockJobManager_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobManager_GetJob_Call) Return(job *entity.Job, err error) *MockJobManager_GetJob_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobManager_GetJob_Call) RunAndReturn(run func(ctx context.Context, id string) (*entity.Job, error)) *MockJobManager_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobsByStatus provides a mock function for the type MockJobManager
func (_mock *MockJobManager) GetJobsByStatus(ctx context.Context, status job.Status, limit int) ([]*entity.Job, error) {
	ret := _mock.Called(ctx, status, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetJobsByStatus")
	}

	var r0 []*entity.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, job.Status, int) ([]*entity.Job, error)); ok {
		return returnFunc(ctx, status, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, job.Status, int) []*entity.Job); ok {
		r0 = returnFunc(ctx, status, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, job.Status, int) error); ok {
		r1 = returnFunc(ctx, status, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobManager_GetJobsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobsByStatus'
type MockJobManager_GetJobsByStatus_Call struct {
	*mock.Call
}

// GetJobsByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status job.Status
//   - limit int
func (_e *MockJobManager_Expecter) GetJobsByStatus(ctx interface{}, status interface{}, limit interface{}) *MockJobManager_GetJobsByStatus_Call {
	return &MockJobManager_GetJobsByStatus_Call{Call: _e.mock.On("GetJobsByStatus", ctx, status, limit)}
}

func (_c *MockJobManager_GetJobsByStatus_Call) Run(run func(ctx context.Context, status job.Status, limit int)) *MockJobManager_GetJobsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 job.Status
		if args[1] != nil {
			arg1 = args[1].(job.Status)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobManager_GetJobsByStatus_Call) Return(jobs []*entity.Job, err error) *MockJobManager_GetJobsByStatus_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockJobManager_GetJobsByStatus_Call) RunAndReturn(run func(ctx context.Context, status job.Status, limit int) ([]*entity.Job, error)) *MockJobManager_GetJobsByStatus_Call {
	_c.Call.Return(run)
	return _c
}
