// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"backend/service-platform/app/api/client/request"
	"backend/service-platform/app/api/client/response"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthManager creates a new instance of MockAuthManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthManager {
	mock := &MockAuthManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthManager is an autogenerated mock type for the AuthManager type
type MockAuthManager struct {
	mock.Mock
}

type MockAuthManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthManager) EXPECT() *MockAuthManager_Expecter {
	return &MockAuthManager_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockAuthManager
func (_mock *MockAuthManager) Login(ctx context.Context, request1 request.AuthUserRequest) (*response.AuthResponse, error) {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *response.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.AuthUserRequest) (*response.AuthResponse, error)); ok {
		return returnFunc(ctx, request1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.AuthUserRequest) *response.AuthResponse); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, request.AuthUserRequest) error); ok {
		r1 = returnFunc(ctx, request1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthManager_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthManager_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 request.AuthUserRequest
func (_e *MockAuthManager_Expecter) Login(ctx interface{}, request1 interface{}) *MockAuthManager_Login_Call {
	return &MockAuthManager_Login_Call{Call: _e.mock.On("Login", ctx, request1)}
}

func (_c *MockAuthManager_Login_Call) Run(run func(ctx context.Context, request1 request.AuthUserRequest)) *MockAuthManager_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 request.AuthUserRequest
		if args[1] != nil {
			arg1 = args[1].(request.AuthUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthManager_Login_Call) Return(authResponse *response.AuthResponse, err error) *MockAuthManager_Login_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockAuthManager_Login_Call) RunAndReturn(run func(ctx context.Context, request1 request.AuthUserRequest) (*response.AuthResponse, error)) *MockAuthManager_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockAuthManager
func (_mock *MockAuthManager) Logout(ctx context.Context, request1 request.LogoutRequest) error {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.LogoutRequest) error); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthManager_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthManager_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 request.LogoutRequest
func (_e *MockAuthManager_Expecter) Logout(ctx interface{}, request1 interface{}) *MockAuthManager_Logout_Call {
	return &MockAuthManager_Logout_Call{Call: _e.mock.On("Logout", ctx, request1)}
}

func (_c *MockAuthManager_Logout_Call) Run(run func(ctx context.Context, request1 request.LogoutRequest)) *MockAuthManager_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 request.LogoutRequest
		if args[1] != nil {
			arg1 = args[1].(request.LogoutRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthManager_Logout_Call) Return(err error) *MockAuthManager_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthManager_Logout_Call) RunAndReturn(run func(ctx context.Context, request1 request.LogoutRequest) error) *MockAuthManager_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthManager
func (_mock *MockAuthManager) RefreshToken(ctx context.Context, request1 request.RefreshTokenRequest) (*response.AuthResponse, error) {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *response.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.RefreshTokenRequest) (*response.AuthResponse, error)); ok {
		return returnFunc(ctx, request1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.RefreshTokenRequest) *response.AuthResponse); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, request.RefreshTokenRequest) error); ok {
		r1 = returnFunc(ctx, request1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthManager_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthManager_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 request.RefreshTokenRequest
func (_e *MockAuthManager_Expecter) RefreshToken(ctx interface{}, request1 interface{}) *MockAuthManager_RefreshToken_Call {
	return &MockAuthManager_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, request1)}
}

func (_c *MockAuthManager_RefreshToken_Call) Run(run func(ctx context.Context, request1 request.RefreshTokenRequest)) *MockAuthManager_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 request.RefreshTokenRequest
		if args[1] != nil {
			arg1 = args[1].(request.RefreshTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthManager_RefreshToken_Call) Return(authResponse *response.AuthResponse, err error) *MockAuthManager_RefreshToken_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockAuthManager_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, request1 request.RefreshTokenRequest) (*response.AuthResponse, error)) *MockAuthManager_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthManager
func (_mock *MockAuthManager) Register(ctx context.Context, request1 request.RegisterRequest) error {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, request.RegisterRequest) error); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthManager_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthManager_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 request.RegisterRequest
func (_e *MockAuthManager_Expecter) Register(ctx interface{}, request1 interface{}) *MockAuthManager_Register_Call {
	return &MockAuthManager_Register_Call{Call: _e.mock.On("Register", ctx, request1)}
}

func (_c *MockAuthManager_Register_Call) Run(run func(ctx context.Context, request1 request.RegisterRequest)) *MockAuthManager_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 request.RegisterRequest
		if args[1] != nil {
			arg1 = args[1].(request.RegisterRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthManager_Register_Call) Return(err error) *MockAuthManager_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthManager_Register_Call) RunAndReturn(run func(ctx context.Context, request1 request.RegisterRequest) error) *MockAuthManager_Register_Call {
	_c.Call.Return(run)
	return _c
}
