apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  namespace: __ARGOCD_NAMESPACE__
  name: __ARGOCD_SERVICE_PROJECT_NAME__
  annotations:
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: __SLACK_NOTIFICATION_CHANNEL__
    notifications.argoproj.io/subscribe.on-sync-failed.slack: __SLACK_NOTIFICATION_CHANNEL__
    notifications.argoproj.io/subscribe.on-health-degraded.slack: __SLACK_NOTIFICATION_CHANNEL__
spec:
  project: __ARGOCD_PROJECT_NAME__
  destination:
    name: __CLUSTER_NAME__
    namespace: __K8S_NAMESPACE__
  source:
    repoURL: __HELM_REPO__
    chart: __HELM_CHART__
    targetRevision: __HELM_VERSION__
    helm:
      releaseName: __SERVICE_NAME__
      valuesObject:
        replicaCount: __K8S_REPLICA_COUNT__
        image:
          repository: __DOCKER_REPO__
          pullPolicy: Always
          tag: __IMAGE_TAG__
        containerPort: __K8S_CONTAINER_PORT__
        imagePullSecrets: []
        nameOverride: ""
        fullnameOverride: "__SERVICE_NAME__"
        containerName: "__SERVICE_NAME__"
        appNameLabel: "__SERVICE_NAME__"
        serviceAccount:
          create: false
          annotations: {}
          name: "__SERVICE_NAME__"
        podAnnotations: {}
        podSecurityContext: {}
        securityContext: {}
        service:
          type: ClusterIP
          port: 80
        ingress:
          enabled: true
          className: "alb"
          annotations:
            alb.ingress.kubernetes.io/group.name: "external"
            kubernetes.io/ingress.class: "alb"
            alb.ingress.kubernetes.io/target-type: "ip"
            alb.ingress.kubernetes.io/healthcheck-path: "/health/"
            alb.ingress.kubernetes.io/scheme: "internet-facing"
            alb.ingress.kubernetes.io/listen-ports: "[{\"HTTP\": 80}, {\"HTTPS\": 443}]"
          hosts:
            - host: "__SERVICE_NAME__.__BASE_DOMAIN__"
              paths:
                - path: /*
                  pathType: ImplementationSpecific
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 3
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 3
          failureThreshold: 6
        resources:
          limits:
            cpu: 500m
            memory: 0.75Gi
          requests:
            cpu: 500m
            memory: 0.75Gi
        autoscaling:
          enabled: true
          minReplicas: 1
          maxReplicas: 2
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 80
          behavior:
            scaleUp:
              stabilizationWindowSeconds: 120
              policies:
                - type: Percent
                  value: 100
                  periodSeconds: 120
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Percent
                  value: 50
                  periodSeconds: 60
        nodeSelector: {}
        tolerations: []
        affinity: {}
        testConnection:
          enabled: false
        secret:
          asFile:
            enabled: false
          asEnv:
            enabled: false
          externalSecretEnv:
            enabled: true
            name: __SERVICE_NAME__-env-var
        configMap:
          asEnv:
            enabled: false
          externalConfigMapEnv:
            enabled: true
            name: __SERVICE_NAME__-config-map
        extraEnvs:
          - name: PORT
            value: "8080"
          - name: LOG_FILE
            value: "/var/log/application/app.log"
        hooks:
          - name: "migration"
            hookTypes: "pre-install,pre-upgrade"
            hookWeight: 0
            shell: /bin/bash
            commands:
              - /flyway/flyway migrate
            customImage:
              enabled: true
              image: __DOCKER_REPO__:__IMAGE_TAG__-migration
            restartPolicy: Never
            resources:
              limits:
                cpu: 1000m
                memory: 1.75Gi
              requests:
                cpu: 1000m
                memory: 1.75Gi
            podAnnotations: {}
            collectLog: false
        datadog:
          enabled: false
